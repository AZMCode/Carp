(doc Introspect
  "Dynamic functions that return information about the s-expressions associated
  to a binding.")
(defmodule Introspect
  (doc module?
    "Is this binding a module?")
  (defndynamic module? [binding]
    (let [s (s-expr binding)]
      (if (empty? s)
          false
          (Dynamic.= (Symbol.from "defmodule") (car s)))))

  (doc function?
    "Is this binding a function?")
  (defndynamic function? [binding]
    (let [s (s-expr binding)]
      (if (empty? s)
          false
          (Dynamic.= (Symbol.from "defn") (car s)))))

  (doc variable?
    "Is this binding a variable?")
  (defndynamic variable? [binding]
    (let [s (s-expr binding)]
      (if (empty? s)
          false
          (Dynamic.= (Symbol.from "def") (car s)))))

  (doc type?
    "Is this binding a type?")
  (defndynamic type? [binding]
    (let [s (s-expr binding)]
      (if (empty? s)
          false
          (Dynamic.= (Symbol.from "deftype") (car s)))))

  (doc struct?
    "Is this binding a struct?")
  (defndynamic struct? [binding]
    (let [s (s-expr binding)]
      (if (empty? s)
          false
          (array? (caddr s)))))

  (doc sumtype?
    "Is this binding a sumtype?")
  (defndynamic sumtype? [binding]
    (let [s (s-expr binding)]
      (if (empty? s)
          false
          (list? (caddr s)))))

  (doc arity
    "What's the arity of this binding?

    - When `binding` is a function, returns the number of arguments.
    - When `binding` is an interface, returns the number of arguments.
    - When `binding` is a struct, returns the number of fields.
    - When `binding` is a sumtype, returns a list of the number of type
      arguments of each constructor.")
  (defndynamic arity [binding]
    (let [s (s-expr binding)]
    (if (empty? s)
        0
    (cond
        (Introspect.interface? binding) (length (car (cdaddr s)))
        (Introspect.function? binding) (length (caddr s))
        (Introspect.struct? binding) (/ (length (caddr s)) 2)
        (Introspect.sumtype? binding) (map (fn [arr]
        (length (cadr arr))) (cddr s))
        0))))

  (doc macro?
    "Is this binding a macro?")
  (defndynamic macro? [binding]
    (let [s (s-expr binding)]
      (if (empty? s)
          false
          (Dynamic.= (Symbol.from "defmacro") (car s)))))

  (doc dynamic?
    "Is this binding a dynamic binding?")
  (defndynamic dynamic? [binding]
    (let [s (s-expr binding)]
      (if (empty? s)
          false
          (or (Dynamic.= (Symbol.from "defdynamic") (car s))
              (Dynamic.= (Symbol.from "dynamic") (car s))))))

  (doc interface?
    "Is this binding an interface?")
  (defndynamic interface? [binding]
    (let [s (s-expr binding)]
      (if (empty? s)
          false
          (Dynamic.= (Symbol.from "definterface") (car s)))))
)
