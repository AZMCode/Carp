(Debug.sanitize-addresses)
(Project.config "print-ast" true)

; (deftype JSON
;   (Str [String])
;   (Num [Double])
;   (Arr [(Array JSON)])
;   (Obj [(Map String JSON)]))

;; Refs in structs
;; (deftype (Aha a) [x a])
;; (def b (Aha.init "bleh"))

;; Refs in sumtypes
;;(def x (Maybe.Just "Heya"))

;; (defn f []
;;   (match x
;;     (Maybe.Just a)  a
;;     (Maybe.Nothing) 0))



;; Adding pre-existing functions to interface when it's defined
;; (defmodule Foo
;;   (defn tripoli [x y z] (Int.= 0 (+ x (+ y z)))))

;; ;; 'foo' will match this interface that is defined AFTER foo
;; (definterface tripoli (Î» [Int Int Int] Bool))

;; ;; This should still be added, obviously
;; (defmodule Goo
;;   (defn tripoli [x y z] (Int.= 0 (+ x (+ y z)))))



;; Issue #681
;; (deftype (X a) [member a])
;; (deftype (Y a) [x (X a)])

;; (defmodule Y
;;   (defn foo [y]
;;     (set-x! y (X.init 1))))

;; (defn main []
;;   (let [y (Y.init (X.init 10))]
;;     (Y.foo &y)))



;; Nesting match
;; (use Maybe)
;; (defn main []
;;   (let [s (Just (Just (Just @"Oh, but hello.")))]
;;     (match s
;;       (Just (Just (Just x))) (println* "It's just just just '" &x "'")
;;       (Just (Just (Nothing))) (IO.println "It's just just nothing.")
;;       (Just (Nothing)) (IO.println "It's just nothing.")
;;       (Nothing) (IO.println "Didn't match."))))


;; Match on refs
(use Maybe)
(defn main []
  (let [s (Just @"Yo")]
    (match-ref &s
      (Just x) (IO.println x)
      (Nothing) (IO.println "nada"))))

(defn f []
  (match-ref &(Just (Just @"foooo"))
     (Just (Just x)) (IO.println x)))
